To set up a Kubernetes cluster on AWS EC2, follow these steps to prepare your environment:
Provision EC2 Instances for the Kubernetes Cluster
We will create a Kubernetes cluster with 3 m5.4xlarge instances (for high availability).
1.1 Launch EC2 Instances
•	Go to AWS EC2 Console → Launch 1 instance (t2.medium) for Master-node.
•	Launch 2 instances(t2.medium) for 2 Worker-nodes.
•	Select Ubuntu 22.04 as the OS.
•	Configure VPC and subnet settings as needed (use default settings for simplicity).
•	Click on Launch instance.
Once Instance is in running state click on security group and edit inbound rules:
•	Attach a security group allowing: 
o	Port 22 (SSH)
o	Port 6443 (Kubernetes API Server)
o	Port 30000-32767 (NodePort Services)
o	Port 80, 443 (HTTP/HTTPS for ALB)
o	Port 9090 (Prometheus)
o	Port 3001 (Grafana)
o	Port 5000(Backend)
o	Port 3000(Frontend)
o	Port 27017(MongoDB)
•	Tag instances properly (Master-node, worker-node1, worker-node2).
1.2	With the help of EC2 Connect ,connect all three instances
Login as a Root user:
$ sudo su
1.3 Install Kubernetes, Docker, and Dependencies
Run the following commands on ALL nodes (Master & Workers):
$ sudo apt update && sudo apt upgrade -y
$ apt-get install apt-transport-https
Install Docker:
$ apt install docker.io -y
$ systemctl start docker
$  systemctl enable docker
Install Open GPG Key for security:
$ sudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add
After installing use command apt-get update

Install Kubernetes:
Edit source list file:
•	nano /etc/apt/sources.list.d/kubernetes.list
Add the below line in the above file:
•	deb http://apt.kubernetes.io/ kubernetes-xenial main
•	Press (Ctrl X Y Enter)
Installing kubeadm, kubelet, and kubectl:
Enter command 1 as it is:
1.sudo apt-get update
# apt-transport-https may be a dummy package; if so, you can skip that package
sudo apt-get install -y apt-transport-https ca-certificates curl gpg
# If the directory `/etc/apt/keyrings` does not exist, it should be created before the curl command, read the note below.
# sudo mkdir -p -m 755 /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
# This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

2.sudo systemctl enable --now kubelet
The above all commands and installation should be done in both MASTER-NODE AMD WORKER-NODE
Initialize the Kubernetes Cluster
This Command should be given in only MASTER-NODE:
$ Kubeadm init
After successful initialization, set up kubectl:
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
Copy and paste the generated commands in the master-node.
Copy the join command output, which looks like:
kubeadm join <MASTER_IP>:6443 --token <TOKEN> --discovery-token-ca-cert-hash sha256:<HASH>
EXAMPLE: kubeadm join 172.31.15.154:6443 --token wqyyfs.jaiyus9xbp132viw \
        --discovery-token-ca-cert-hash sha256:cd23a0d51554b037882a554b815f4f1a08208098832192b991007aa57f501085
Run this command on all worker nodes.
Verify all nodes are connected:
$ kubectl get nodes

Install a CNI (Networking)
We will use Calico and flannel as the networking plugin:
$ kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
Confirm node are in ready state.
$ kubectl get nodes

